namespace modifies String {
	function toBoolean( string value ) {
		if( value.toLower() == 'yes' or
			value.toLower() == 'true' or
			value == '1' )
		{
			return true;
		}
		return false;
	}
}

namespace modifies Array {
	function sectionNames( array list ) {
		array sections;
		array have;
		list.each() using ( o ) {
			if( not have.keyExists(o.section) )
				sections[] = o.section;
		};
		return sections;
	}
	function bySectionAndName( array list, string section, string name ) {
		object match;
		list.each() using ( entry ) {
			if( entry.section == section and entry.name == name ) {
				match = entry;
				return false; // break
			}
		};
		return match;
	}
	function valueBySectionAndName( array list, string section, string name, void defaultValue ) {
		object match = list.bySectionAndName(section, name);
		if( match ) {
			if( defaultValue isa boolean ) return match.value.toBoolean();
			if( defaultValue isa number )  return match.value.toNumber();
			return match.value;
		}
		return defaultValue;
	}
	function byName( array list, string name ) {
		object match;
		list.each() using ( entry ) {
			if( entry.name == name ) {
				match = entry;
				return false; // break
			}
		};
		return match;
	}
	function valueByName( array list, string name, void defaultValue ) {
		object match = list.byName(name);
		if( match ) {
			if( defaultValue isa boolean ) return match.value.toBoolean();
			if( defaultValue isa number )  return match.value.toNumber();
			return match.value;
		}
		return defaultValue;
	}
	function listBySection( array list, string section ) {
		array matches;
		list.each() using( entry ) {
			if( entry.section == section )
				matches[] = entry;
		};
		return matches;
	}
}

class Config {
	static array values;
	static function load() {
		array ini = Engine.parseINI('Game.ini');
		ini.each() using ( entry ) {
			if( .values.keyExists(entry.name) ) {
				if      ( .values[entry.name] isa boolean ) .values[entry.name] = (entry.value.toLower() == 'true' or 
				                                                                   entry.value.toLower() == 'yes' ? true : false);
				else if ( .values[entry.name] isa number )  .values[entry.name] = entry.value.toNumber();
				else                                        .values[entry.name] = entry.value;
			} else {
				.values[entry.name] = entry.value;
			}
		};
	}
	static function setValue( string name, string value ) {
		.values[name] = value;
	}
	static function setValue( string name, number value ) {
		.values[name] = value;
	}
	static function setValue( string name, boolean value ) {
		.values[name] = value;
	}
	static function attribute_missing( string name ) {
		if( .values.keyExists(name) )
			return .values[name];
		return "";
	}
}

Config.setValue('WindowTitle', 'Secret Project');
Config.setValue('ScreenWidth', 640);
Config.setValue('ScreenHeight', 480);
Config.setValue('ShowFPS', true);
Config.setValue('GameTime', 30);
Config.setValue('GameClockFont', 'Resources/Fonts/Audiowide/Audiowide-Regular.ttf');
Config.setValue('GameClockFontSize', 24);

Config.setValue('PlayerSpawnX', 100);
Config.setValue('PlayerSpawnY', 100);
Config.setValue('PlayerGravity', 0.5);
Config.setValue('PlayerMoveVelocity', 3.5);
Config.setValue('PlayerJumpVelocity', -10.0);
Config.setValue('PlayerTeleportBackVelocity', -40.0);
