class PlayerCamera {
	number screenX;
	number screenY;
	number screenWidth;
	number screenHeight;
	number left;
	number right;
	number top;
	number bottom;

	function constructor( number screenX, number screenY, number screenWidth, number screenHeight ) {
		.screenX = screenX;
		.screenY = screenY;
		.screenWidth = screenWidth;
		.screenHeight = screenHeight;
	}

	function update( object map, object player ) {
		.left = player.x - (.screenWidth / 2) + (.screenWidth / 4);
		.top = player.y - (.screenHeight / 2);
		
		if( .left < 0 ) {
			.left = 0;
		} else if( .left > (map.width - .screenWidth) ) {
			.left = map.width - .screenWidth;
		}

		if( .top < 0 ) {
			.top = 0;
		} else if( .top > (map.height - .screenHeight) ) {
			.top = map.height - .screenHeight;
		}

		.right = .left + .screenWidth;
		.bottom = .top + .screenHeight;
	}
}

class Player {
	number gravity;
	number speed;
	number x;
	number y;
	number width;
	number height;

	object controller;
	object velocity;

	object chestTexture;
	object coinTexture;
	object texture;
	object runTexture;
	object slideTexture;
	object wheelSprite;

	boolean moveLeft;
	boolean moveRight;
	boolean jump;
	boolean slide;
	boolean sliding;
	boolean onGround;
	boolean alive;
	boolean pause;
	boolean showScore;

	number chestCoins;
	number currentCoins;

	static function load( object inputDevice ) {
		object player = new Player();
		player.controller = new PlayerController(inputDevice);
		player.chestTexture = ResourceManager.loadTexture('Resources/chest_icon.png');
		player.coinTexture = ResourceManager.loadTexture('Resources/tiny_fox_coin.png');
		player.runTexture = ResourceManager.loadTexture('Resources/' + Config.PlayerRunTexture);
		player.slideTexture = ResourceManager.loadTexture('Resources/' + Config.PlayerSlideTexture);
		player.wheelSprite = Sprite.load('PlayerWheel');
		player.reset();
		return player;
	}

	function constructor {
		.velocity = new Vector();
	}

	function reset() {
		.texture = .runTexture;
		.x = Config.PlayerSpawnX;
		.y = Config.PlayerSpawnY;
		.width = .texture.width;
		.height = .texture.height;
		.gravity = Config.PlayerGravity; // 0.5
		.speed = Config.PlayerMoveVelocity; // 3.5
		.alive = true;
		.pause = false;
		.showScore = false;
	}

	function transferCoins() {
		.chestCoins += .currentCoins;
		.currentCoins = 0;
	}

	function hasCollision( object map, object position ) {
		object rect = new Rectangle();
		rect.x = position.x;
		rect.y = position.y;
		rect.width = .width;
		rect.height = .height;
		return map.hasCollisionWithGround(rect);
	}

	function die( boolean resetCoins, object camera ) {
		.alive = false;
		.y = Config.PlayerSpawnY;
		if( resetCoins ) {
			Engine.playSound(ResourceManager.loadSound('Resources/Audio/fail_OG.ogg'));
			.currentCoins = 0;
		} else {
			.pause = true;
		}
	}

	function update( object map, object camera ) {
		object pos = new Vector(.x, .y);
		boolean collision;

		if( .pause ) {
			.controller.update(self);
			if( .slide or .jump ) {
				if( .showScore ) {
					GameManager.reset();
					return;
				} else {
					.pause = false;
				}
			} else {
				return;
			}
		}

		if( .alive ) {
			.controller.update(self);

			.velocity.x = 0.0;

			if( .moveLeft )  .velocity.x = -.speed;
			if( .moveRight ) .velocity.x = .speed;

			if( .slide ) {
				if( .onGround ) {
					.texture = .slideTexture;
					.width = .slideTexture.width;
					.height = .slideTexture.height;
					.sliding = true;
				}
			} else {
				if( .sliding ) {
					.texture = .runTexture;
					.width = .runTexture.width;
					.height = .runTexture.height;
					.y -= ((.runTexture.height - .slideTexture.height) / 2) + 1;
					.sliding = false;
				}

				if( .onGround and .jump ) {
					Engine.playSound(ResourceManager.loadSound('Resources/Audio/jump_OG.ogg'));
					.onGround = false;
					.velocity.y = Config.PlayerJumpVelocity; // -10.0
					.wheelSprite.play = false;
				}
			}

			.velocity.y += (Time.delta / 10.0) * .gravity;
		} else {
			if( .x > Config.PlayerSpawnX ) {
				.velocity.x = Config.PlayerTeleportBackVelocity;
				.velocity.y = 0.0;
			}
		}

		pos.x += (Time.delta / 10.0) * .velocity.x;
		pos.y += (Time.delta / 10.0) * .velocity.y;

		if( .alive and .hasCollision(map, pos) ) {
			boolean has = false;
			has = .hasCollision(map, new Vector(pos.x, .y)); // x
			if( not has ) {
				// We are here because collision on x has not occured.
				// That means we can assume we have collision on y.
				.x = pos.x;
				.velocity.y = 0.0;
				.onGround = true;
				.wheelSprite.play = true;
			} else {
				.die(true, camera);
			}
		} else {
			.x = pos.x;
			.y = pos.y;
			.onGround = false;
			.wheelSprite.play = false;
		}

		if( .alive ) {
			map.checkForCollisionWithObject(self);
			if( .x > map.width or .y > map.height ) {
				boolean resetCoins = (.x > map.width ? false : true);
				.die(resetCoins, camera);
			}
		} else {
			if( .x <= Config.PlayerSpawnX ) {
				.alive = true;
				.x = Config.PlayerSpawnX;
				.y = Config.PlayerSpawnY;
				map.resetObjects();
				Engine.playSound(ResourceManager.loadSound('Resources/Audio/restart_OG.ogg'));
			}
		}
	}

	function render( object map, object camera ) {
		if( .alive ) {
			number x;
			number y;

			if( camera.left == camera.screenX or camera.right == map.width ) {
				x = .x - camera.left + camera.screenX;
			} else {
				x = (camera.screenWidth / 2) - (camera.screenWidth / 4) + camera.screenX;
			}
			if( camera.top == camera.screenY or camera.bottom == map.height ) {
				y = .y - camera.top + camera.screenY;
			} else {
				y = (camera.screenHeight / 2) + camera.screenY;
			}

			x -= .width / 2;
			y -= .height / 2;

			Engine.renderTexture(.texture, x, y);
			.wheelSprite.render(
					x + (.width / 2) + (.sliding ? 16 : -3),
					y + (.height / 2) + (.sliding ? 8 : 21),
					camera
				);
		}
		.renderHUD(camera);
		if( .pause and .showScore ) {
			number coins = .chestCoins + .currentCoins;
			Engine.renderTexture(
				.chestTexture,
					(camera.screenWidth / 2) - 100 + camera.screenX,
					(camera.screenHeight / 2) - 30 + camera.screenY
			);
			Engine.renderText(
					Application.HUDfont,
					"${coins}",
					255, 255, 255,
					(camera.screenWidth / 2) - 50 + camera.screenX,
					(camera.screenHeight / 2) - 20 + camera.screenY
				);
			Engine.renderText(
					Application.HUDfont,
					"Press [jump] or [slide] to start next game.",
					255, 255, 255,
					(camera.screenWidth / 2) - 220 + camera.screenX,
					(camera.screenHeight / 2) + 40 + camera.screenY
				);
		} else if( .pause ) {
			Engine.renderText(
					Application.HUDfont,
					"Press [jump] or [slide] to run again.",
					255, 255, 255,
					(camera.screenWidth / 2) - 200 + camera.screenX,
					(camera.screenHeight / 2) - 20 + camera.screenY
				);
		}
	}

	function renderHUD( object camera ) {
		Engine.renderTexture(
				.chestTexture,
				5 + camera.screenX,
				camera.screenHeight - 5 - .chestTexture.height + camera.screenY
			);
		Engine.renderText(
				Application.HUDfont,
				"${.chestCoins}",
				255, 255, 255,
				5 + .chestTexture.width + 5 + camera.screenX,
				camera.screenHeight - 2 - .chestTexture.height + camera.screenY
			);
		Engine.renderTexture(
				.coinTexture,
				10 + camera.screenX,
				camera.screenHeight - 9 - .chestTexture.height - 5 - 30 + camera.screenY
			);
		Engine.renderText(
				Application.HUDfont,
				"${.currentCoins}",
				255, 255, 255,
				5 + .chestTexture.width + 5 + camera.screenX,
				camera.screenHeight - 2 - .chestTexture.height - 5 - 35 + camera.screenY
			);
	}

	function onObjectCollision( object o ) {
		if( o.type == MapTile.TYPE_COIN ) {
			Engine.playSound(ResourceManager.loadSound('Resources/Audio/Pickup_Coin_OG.ogg'));
			.currentCoins++;
			o.remove();
		}
	}

	function showScore() {
		.pause = true;
		.showScore = true;
	}
}
