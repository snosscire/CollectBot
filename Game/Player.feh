class PlayerCamera {
	number screenWidth;
	number screenHeight;
	number left;
	number right;
	number top;
	number bottom;

	function constructor( number screenWidth, number screenHeight ) {
		.screenWidth = screenWidth;
		.screenHeight = screenHeight;
	}

	function update( object map, object player ) {
		.left = player.x - (.screenWidth / 2) + (.screenWidth / 4);
		.top = player.y - (.screenHeight / 2);
		
		if( .left < 0 ) {
			.left = 0;
		} else if( .left > (map.width - .screenWidth) ) {
			.left = map.width - .screenWidth;
		}

		if( .top < 0 ) {
			.top = 0;
		} else if( .top > (map.height - .screenHeight) ) {
			.top = map.height - .screenHeight;
		}

		.right = .left + .screenWidth;
		.bottom = .top + .screenHeight;
	}
}

class Player {
	number gravity;
	number speed;
	number x;
	number y;
	number width;
	number height;

	object controller;
	object velocity;

	object texture;
	object runTexture;
	object slideTexture;

	boolean moveLeft;
	boolean moveRight;
	boolean jump;
	boolean slide;
	boolean sliding;
	boolean onGround;
	boolean alive;

	static function load() {
		object player = new Player();
		player.controller = new PlayerController(new KeyboardInputDevice());
		player.runTexture = Engine.loadTexture('Resources/' + Config.PlayerRunTexture);
		player.slideTexture = Engine.loadTexture('Resources/' + Config.PlayerSlideTexture);
		player.texture = player.runTexture;
		player.x = Config.PlayerSpawnX;
		player.y = Config.PlayerSpawnY;
		player.width = player.texture.width;
		player.height = player.texture.height;
		player.gravity = Config.PlayerGravity; // 0.5
		player.speed = Config.PlayerMoveVelocity; // 3.5
		//player.alive = true;
		return player;
	}

	function constructor {
		.velocity = new Vector();
	}

	function hasCollision( object map, object position ) {
		object rect = new Rectangle();
		rect.x = position.x;
		rect.y = position.y;
		rect.width = .width;
		rect.height = .height;
		return map.hasCollision(rect);
	}

	function update( object map ) {
		object pos = new Vector(.x, .y);
		boolean collision;

		if( .alive ) {
			.controller.update(self);

			.velocity.x = 0.0;

			if( .moveLeft )  .velocity.x = -.speed;
			if( .moveRight ) .velocity.x = .speed;

			if( .slide ) {
				if( .onGround ) {
					.texture = .slideTexture;
					.width = .slideTexture.width;
					.height = .slideTexture.height;
					.sliding = true;
				}
			} else {
				if( .sliding ) {
					.texture = .runTexture;
					.width = .runTexture.width;
					.height = .runTexture.height;
					.y -= (.runTexture.height - .slideTexture.height) / 2;
					.sliding = false;
				}

				if( .onGround and .jump ) {
					.onGround = false;
					.velocity.y = Config.PlayerJumpVelocity; // -10.0
				}
			}

			.velocity.y += .gravity;
		} else {
			if( .x > Config.PlayerSpawnX ) {
				.velocity.x = Config.PlayerTeleportBackVelocity;
				.velocity.y = 0.0;
			}
		}

		pos.x += (Time.delta / 10.0) * .velocity.x;
		pos.y += (Time.delta / 10.0) * .velocity.y;

		if( .alive and .hasCollision(map, pos) ) {
			boolean has = false;
			has = .hasCollision(map, new Vector(pos.x, .y)); // x
			if( not has ) {
				// We are here because collision on x has not occured.
				// That means we can assume we have collision on y.
				.x = pos.x;
				.velocity.y = 0.0;
				.onGround = true;
			} else {
				has = .hasCollision(map, new Vector(.x, pos.y)); // y
				if( not has ) {
					// We are here because collision on y has not occured.
					.y = pos.y;
				} else {
					.velocity.y = 0.0;
					.onGround = true;
				}
			}
		} else {
			.x = pos.x;
			.y = pos.y;
			.onGround = false;
		}

		if( .alive ) {
			if( .x > map.width or .y > map.height ) {
				.alive = false;
				.y = Config.PlayerSpawnY;
			}
		} else {
			if( .x <= Config.PlayerSpawnX ) {
				.alive = true;
				.x = Config.PlayerSpawnX;
				.y = Config.PlayerSpawnY;
			}
		}
	}

	function render( object map, object camera ) {
		number x;
		number y;

		if( not .alive )
			return;

		if( camera.left == 0 or camera.right == map.width ) {
			x = .x - camera.left;
		} else {
			x = (camera.screenWidth / 2) - (camera.screenWidth / 4);
		}
		if( camera.top == 0 or camera.bottom == map.height ) {
			y = .y - camera.top;
		} else {
			y = Config.ScreenHeight / 2;
		}

		x -= .width / 2;
		y -= .height / 2;

		Engine.renderTexture(.texture, x, y);
	}
}
