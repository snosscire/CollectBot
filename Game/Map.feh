
class MapLayer {
	number x;
	number y;
	number level;
	number speed;
	object texture;

	function render( object camera ) {
		number screenX;
		number screenY = .y - camera.top + camera.screenY;
		number extra = 0;
		do {
			screenX = ((.x + camera.screenX - camera.left) * .speed).floor() + extra;
			if( screenX + .texture.width >= camera.screenX )
				Engine.renderTexture(.texture, screenX, screenY);
			extra += .texture.width;
		} while( screenX + .texture.width < camera.screenWidth + camera.screenX );
	}
}

class MapTile {
	static string TYPE_GROUND = 'ground';
	static string TYPE_COIN = 'coin';
	static string TYPE_DECORATION = 'decoration';

	number x;
	number y;
	object sprite;
	string type;
	boolean alive;
	boolean coin;
	number screenX;
	number screenY;

	function render( object camera ) {
		if( .alive ) {
			.screenX = .x - camera.left + camera.screenX;
			.screenY = .y - camera.top + camera.screenY;
			if( .coin ) {
				.sprite.render(.screenX, .screenY, camera);
			} else {
				if( .screenX + .sprite.frames[0].texture.width >= 0 and
					.screenX <= camera.screenWidth + camera.screenX and
					.screenY + .sprite.frames[0].texture.height >= 0 and
					.screenY <= camera.screenHeight + camera.screenY )
				{
					Engine.renderTexture(.sprite.frames[0].texture, .screenX, .screenY);
				}
			}
		}
	}

	function remove() {
		.alive = false;
	}
}

class Map {
	array layers;
	array tiles;
	array tilesWithCollision;
	array objects;
	number width;
	number height;
	number tileWidth;
	number tileHeight;

	static function load( string name ) {
		string basePath = "Resources/Maps/${name}/";
		object map = new Map();
		array config = Engine.parseINI(basePath + 'Map.ini');

		map.width = config.valueByName('MapWidth', 1920);
		map.height = config.valueByName('MapHeight', 1080);
		map.tileWidth = config.valueByName('TileWidth', 10);
		map.tileHeight = config.valueByName('TileHeight', 10);

		map.loadLayers(basePath);
		map.loadTiles(basePath);

		return map;
	}

	function loadLayers( string basePath ) {
		array config = Engine.parseINI(basePath + 'Layers.ini');
		array sections = config.sectionNames();

		sections.each() using ( section ) {
			array list = config.listBySection(section);
			object texture = ResourceManager.loadTexture(basePath + 'Layers/' + list.valueByName('Texture', ''));

			if( texture ) {
				number x = list.valueByName('X', 0);
				number y = list.valueByName('Y', 0);
				object layer = new MapLayer();
				layer.x = (x >= 0 ? x : .width + x);
				layer.y = (y >= 0 ? y : .height + y);
				layer.level = list.valueByName('Level', 0);
				layer.speed = list.valueByName('Speed', 0);
				layer.texture = texture;
				.layers[] = layer;
			}
		};
	}

	function loadTiles( string basePath ) {
		object image = Engine.loadImage(basePath + 'Map.png');
		if( image ) {
			array config = Engine.parseINI(basePath + 'Tiles.ini');
			array sections = config.sectionNames();
			array sprites;
			array types;

			sections.each() using ( section ) {
				array list = config.listBySection(section);
				number color = image.getColor(list.valueByName('Red', 0),
					                          list.valueByName('Green', 0),
					                          list.valueByName('Blue', 0));
				string textureName = list.valueByName('Texture', '');
				string spriteName = list.valueByName('Sprite', '');
				object texture = (textureName ? ResourceManager.loadTexture(basePath + 'Tiles/' + textureName) : null);
				object sprite = (spriteName ? Sprite.load(spriteName) : null);
				if( texture or sprite ) {
					if( not sprite ) {
						object frame = new SpriteFrame();
						sprite = new Sprite();
						frame.texture = texture;
						frame.time = 1000;
						sprite.frames[] = frame;
					}
					sprite.play = true;
					sprite.center = false;
					sprites["$color"] = sprite;
					types["$color"] = list.valueByName('Type', 'ground').toLower();
				}
			};

			for( number y = 0; y < image.height; y++ ) {
				for( number x = 0; x < image.width; x++ ) {
					number color = image.getPixel(x, y);
					if( sprites.keyExists("$color") ) {
						object tile = new MapTile();
						tile.x = x * .tileWidth;
						tile.y = y * .tileHeight;
						tile.sprite = sprites["$color"];
						tile.type = types["$color"];
						tile.alive = true;

						if( tile.type == MapTile.TYPE_COIN ) {
							tile.coin = true;
							.objects[] = tile;
						} else {
							.tiles[] = tile;
							if( tile.type == MapTile.TYPE_GROUND )
								.tilesWithCollision[] = tile;
						}
					}
				}
			}
		}
	}

	function renderBackground( object camera ) {
		for( number i = 0; i < .layers.size(); i++ ) {
			if( .layers[i].level <= 0 ) {
				.layers[i].render(camera);
			}
		}
		for( number i = 0; i < .tiles.size(); i++ ) {
			.tiles[i].render(camera);
		}
		for( number i = 0; i < .objects.size(); i++ ) {
			.objects[i].render(camera);
		}
	}

	function renderForeground( object camera ) {
		for( number i = 0; i < .layers.size(); i++ ) {
			if( .layers[i].level > 0 ) {
				.layers[i].render(camera);
			}
		}
	}

	function hasCollisionWithGround( object player ) {
		boolean has = false;
		for( number i = 0; i < .tilesWithCollision.size(); i++ ) {
			has = Engine.hasIntersection(.tilesWithCollision[i].x,
			                             .tilesWithCollision[i].y,
			                             .tileWidth,
			                             .tileHeight,
			                             player.x - (player.width / 2),
			                             player.y - (player.height / 2),
			                             player.width,
			                             player.height);
			if( has )
				break;
		};
		return has;
	}

	function checkForCollisionWithObject( object player ) {
		boolean has;
		for( number i = 0; i < .objects.size(); i++ ) {
			if( .objects[i].alive ) {
				has = Engine.hasIntersection(.objects[i].x,
				                             .objects[i].y,
				                             .tileWidth,
				                             .tileHeight,
				                             player.x - (player.width / 2),
				                             player.y - (player.height / 2),
				                             player.width,
				                             player.height);
				if( has )
					player.onObjectCollision(.objects[i]);
			}
		}
	}

	function resetObjects() {
		.objects.each() using ( o ) {
			o.alive = true;
		};
	}
}
